from PIL import Image
import pytesseract
import streamlit as st
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.prompts import PromptTemplate
from dotenv import load_dotenv
import google.generativeai as genai
import os

# Load API Key
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise ValueError("GOOGLE_API_KEY not found in .env")
genai.configure(api_key=api_key)


# OCR from images
def get_img_text1(uploaded_files):
    pytesseract.pytesseract.tesseract_cmd = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
    full_text = ""
    for uploaded_file in uploaded_files:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)  # show image
        text = pytesseract.image_to_string(image)
        full_text += text + "\n"
    st.write("Extracted Text:", full_text)
    return full_text


# Text splitter
def get_text_chunks(text):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    return text_splitter.split_text(text)

# Embedding and Vector DB
def get_vector_store(text_chunks):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)
    vector_store.save_local("faiss_index")

# Conversational chain
def get_conversational_chain():
    prompt_template = """
    Answer the question as detailed as possible from the provided context.
    If the answer is not in the context, say "answer is not available in the context".

    Context:
    {context}

    Question:
    {question}

    Answer:
    """
    model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    return load_qa_chain(model, chain_type="stuff", prompt=prompt)

# Q&A
def user_input(user_question):
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
    new_db = FAISS.load_local("faiss_index", embeddings, allow_dangerous_deserialization=True)
    docs = new_db.similarity_search(user_question)
    chain = get_conversational_chain()
    response = chain({"input_documents": docs, "question": user_question}, return_only_outputs=True)
    st.write("Reply:", response["output_text"])


# Streamlit UI
def main():
    st.set_page_config(page_title="Chat with OCR Image")
    st.header("üß† OCR-based Image Q&A using Gemini + FAISS")

    # Question Input
    user_question = st.text_input("üîç Ask something from the uploaded images:")
    if user_question:
        user_input(user_question)

    # Upload & Process
    with st.sidebar:
        st.set_page_config(page_title="Chat with OCR Image")
        st.write("üëã App loaded!")  # Debug print

        st.header("üß† OCR-based Image Q&A using Gemini + FAISS")
        st.title("üìÇ Upload Image Files")
        image_files = st.file_uploader("Upload images (JPG, PNG, etc.)", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

        if st.button("‚úÖ Submit & Process"):
            if not image_files:
                st.warning("Please upload at least one image file.")
                return

            with st.spinner("üîÑ Extracting text and generating embeddings..."):
                raw_text = get_img_text1(image_files)
                chunks = get_text_chunks(raw_text)
                get_vector_store(chunks)
                st.success("‚úÖ Done! Now you can ask questions.")

if __name__ == "__main__":
    main()
